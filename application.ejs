let cc;
export class Application {
    constructor () {
        this.settingsPath = '<%= settingsJsonPath %>'; // settings.json file path, usually passed in by the editor when building, you can also specify your own path
        this.showFPS = <%= showFPS %>; // Whether or not to open the profiler, usually passed in when the editor is built, but you can also specify the value you want

        const hostname = location.hostname;
        if (hostname != 'localhost' && !hostname.includes('alpha') && !window.location.href.includes('test/index.html')&& !hostname.includes('10.219')&& !hostname.includes('192.168'))
        {
            !function() {
              function detectDevTool() {
                let f = new Function('var allow = 100; var start = +new Date(); debugger; var end = +new Date(); if (isNaN(start) || isNaN(end) || end - start > allow) {location.reload();}');
                f();
              }
              if(window.attachEvent) {
                if (document.readyState === "complete" || document.readyState === "interactive") {
                    detectDevTool();
                  window.attachEvent('onresize', detectDevTool);
                  window.attachEvent('onmousemove', detectDevTool);
                  window.attachEvent('onfocus', detectDevTool);
                  window.attachEvent('onblur', detectDevTool);
                } else {
                    setTimeout(argument.callee, 0);
                }
              } else {
                window.addEventListener('load', detectDevTool);
                window.addEventListener('resize', detectDevTool);
                window.addEventListener('mousemove', detectDevTool);
                window.addEventListener('focus', detectDevTool);
                window.addEventListener('blur', detectDevTool);
              }
            }();
        }
    }

    init (engine) {
        cc = engine;
        cc.game.onPostBaseInitDelegate.add(this.onPostInitBase.bind(this)); // Listening for engine start process events onPostBaseInitDelegate
        cc.game.onPostSubsystemInitDelegate.add(this.onPostSystemInit.bind(this)); // Listening for engine start process events onPostSubsystemInitDelegate
    }

    onPostInitBase () {
        if (!cc.sys.isMobile)
        {
            document.getElementById("GameDiv").style.maxWidth = "75vh";
            cc.settings.overrideSettings('screen', 'exactFitScreen', false);
        }
    }

    onPostSystemInit () {
        // Implement some custom logic
    }

    start () {
        return cc.game.init({ // Run the engine with the required parameters
            debugMode: <%= debugMode %> ? cc.DebugMode.INFO : cc.DebugMode.ERROR,
            settingsPath: this.settingsPath, // Pass in the settings.json path
            overrideSettings: { // Override part of the data in the configuration file, this field will be described in detail below
                // assets: {
                //      preloadBundles: [{ bundle: 'main', version: 'xxx' }],
                // }
                profiling: {
                    showFPS: this.showFPS,
                }
            }
        }).then(() => cc.game.run());
    }
}